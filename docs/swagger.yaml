basePath: /api
consumes:
- application/json
definitions:
  controllers.AdminRegisterInput:
    properties:
      admin_secret:
        type: string
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - admin_secret
    - email
    - password
    type: object
  controllers.CancelOrderResponse:
    properties:
      message:
        type: string
    type: object
  controllers.CreateOrderResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.OrderPayload'
    type: object
  controllers.CreateProductInput:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
    required:
    - name
    - price
    type: object
  controllers.CreateProductResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.ProductPayload'
    type: object
  controllers.DeleteProductResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.GetOrdersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.OrderPayload'
        type: array
    type: object
  controllers.GetProductsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.ProductPayload'
        type: array
    type: object
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  controllers.OrderItemPayload:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  controllers.OrderPayload:
    properties:
      created_at:
        type: string
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/controllers.OrderItemPayload'
        type: array
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  controllers.OrderRequest:
    properties:
      items:
        items:
          properties:
            product_id:
              type: integer
            quantity:
              type: integer
          type: object
        type: array
    type: object
  controllers.ProductPayload:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  controllers.RegisterInput:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterResponse:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/controllers.UserPayload'
    type: object
  controllers.SingleProductResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.ProductPayload'
    type: object
  controllers.UpdateOrderStatusResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.OrderPayload'
    type: object
  controllers.UpdateProductResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.ProductPayload'
    type: object
  controllers.UserPayload:
    properties:
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
    type: object
  models.Product:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      updatedAt:
        type: string
    type: object
host: localhost
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample e-commerce server with Gin and GORM.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-commerce API
  version: "1.0"
paths:
  /api/admin/orders/{id}/status:
    put:
      description: Allows an admin to update order status (e.g., Shipped, Completed,
        Cancelled)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Status (Shipped|Completed|Cancelled)
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateOrderStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an order status
      tags:
      - orders
  /api/admin/products:
    get:
      description: Returns a list of all products (admin only endpoint in this example)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetProductsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Adds a new product to the store (admin only)
      parameters:
      - description: Create Product Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.CreateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /api/admin/products/{id}:
    delete:
      description: Deletes an existing product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DeleteProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      description: Returns a single product (admin only endpoint in this example)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SingleProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a product by its ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates an existing product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - products
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Logs in an existing user and returns a JWT token
      parameters:
      - description: Login Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password
      parameters:
      - description: Register Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/auth/register-admin:
    post:
      consumes:
      - application/json
      description: Creates a new admin user if a valid admin secret is provided
      parameters:
      - description: Admin Register Input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.AdminRegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new admin user
      tags:
      - auth
  /api/orders:
    get:
      description: Returns a list of orders belonging to the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetOrdersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders for the authenticated user
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Places a new order for the authenticated user
      parameters:
      - description: Order Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.OrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.CreateOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /api/orders/{id}/cancel:
    put:
      description: Cancels an order if it's still in 'Pending' status
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CancelOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel an order
      tags:
      - orders
produces:
- application/json
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
